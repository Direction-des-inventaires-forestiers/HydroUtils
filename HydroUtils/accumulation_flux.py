# -*- coding: utf-8 -*-

"""
/***************************************************************************
 HydroUtils
                                 A QGIS plugin
 Identifie le bassin versant de polygones d'intérêt
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-07-14
        copyright            : (C) 2022 by Jean-François Bourdon (MFFP-DIF)
        email                : jean-francois.bourdon@mffp.gouv.qc.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Jean-François Bourdon (MFFP-DIF)'
__date__ = '2022-07-14'
__copyright__ = '(C) 2022 by Jean-François Bourdon (MFFP-DIF)'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import *
from PyQt5.QtCore import *
import processing
from processing.core.Processing import Processing
from qgis.analysis import QgsNativeAlgorithms

import glob
import os
import subprocess

from .sidescripts import *


class accumulationFlux(QgsProcessingAlgorithm):

    script_dir = os.path.dirname(__file__)
    dict_config = get_config(script_dir)

    def initAlgorithm(self, config):
        self.addParameter(
            QgsProcessingParameterFile(
                'INPUT_d8',
                'Répertoire contenant les D8',
                QgsProcessingParameterFile.Folder
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        dird8 = self.parameterAsString(parameters, 'INPUT_d8', context)


        # Chemin d'accès à Whitebox Tools
        path_wbt = os.path.join(self.script_dir, "whitebox_tools.exe")


        # Paramètres pour les appels à subprocess.run()
        startupinfo = subprocess.STARTUPINFO()
        startupinfo.dwFlags = subprocess.STARTF_USESHOWWINDOW
        startupinfo.wShowWindow = int(self.dict_config["variables"]["wShowWindow"])


        # Production en boucle des fichiers d'accumulation de flux
        ls_pntr = glob.glob(os.path.join(dird8, "D8_directions_????_???_*.sdat"))
        nb_pntr = len(ls_pntr)
        feedback.setProgress(1)
        for ii, pntr in enumerate(ls_pntr):
            if feedback.isCanceled():
                return {}

            feedback.pushInfo(f"{os.path.basename(pntr)} ({ii+1}/{nb_pntr})")

            splitted = os.path.basename(pntr).split("_")
            splitted[1] = "accumulations"
            path_d8accum = os.path.join(dird8, "_".join(splitted))
            run_wbt("D8FlowAccumulation", {
                "input":pntr,
                "pntr":True,
                "output":path_d8accum
                }, path_wbt, startupinfo)
            
            feedback.setProgress((ii+1) / nb_pntr * 100)
        
        feedback.pushInfo(f"\nNotez qu'une symbologie est proposée au {os.path.join(self.script_dir, 'accumulation_flux_ln.qml')}")

        return {}


    def name(self):
        return 'accumulations_flux'

    def displayName(self):
        return 'Production des accumulations de flux'

    def group(self):
        return self.tr(self.groupId())

    def groupId(self):
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return accumulationFlux()
